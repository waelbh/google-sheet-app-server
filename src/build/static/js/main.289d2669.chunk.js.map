{"version":3,"sources":["components/GoogleConnectApiForm.tsx","components/layout/Footer.tsx","components/layout/HeaderComponent.tsx","components/SelectSpreadSheetsForm.tsx","constants/index.tsx","actions/index.ts","helpers/Notification.tsx","pages/Home.tsx","index.tsx"],"names":["GoogleConnectApiForm","prop","handleConnectApi","Container","className","Header","inverted","as","Button","size","onClick","width","alt","src","style","padding","Footer","Segment","vertical","href","target","rel","HeaderComponent","connected","handleLogOut","Menu","borderless","compact","SelectSheetsForm","options","handleDeduplicateAction","useState","selectedSpreadSheetId","setSelectedSpreadSheetId","Form","Field","control","Select","label","htmlFor","placeholder","search","searchInput","id","onChange","_e","value","type","disabled","e","COOKIE_NAME","getGoogleConnectApiUrl","a","axios","get","withCredentials","resp","data","getSheetsList","updateDeduplicationSheets","Notification","props","notificationStatus","useEffect","display","toast","text","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","bodyStyle","color","fontFamily","fontSize","lineHeight","cookies","Cookies","Home","setConnected","spreadSheetsList","setSpreadsheetsList","setNotificationStatus","apiResult","getSpreadsheetsList","then","result","formatedList","files","map","item","name","urlLink","setTimeout","window","location","replace","spSheetId","preventDefault","status","textAlign","remove","SelectSpreadSheetsForm","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.289d2669.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button, Container, Header } from 'semantic-ui-react';\r\n\r\ninterface Prop {\r\n    handleConnectApi: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\r\n}\r\nconst GoogleConnectApiForm: React.FC<Prop> = (prop) => {\r\n    const { handleConnectApi } = prop;\r\n\r\n    return (\r\n        <Container className=\"content\">\r\n            <Header inverted as=\"h1\">\r\n                Explore your google sheets\r\n            </Header>\r\n            <p>\r\n                Google sheets app will explore and handle Data deduplication on your spreadsheets, First we need your\r\n                google Authentification and Authorization and you're ready to go!\r\n            </p>\r\n\r\n            <Button size=\"huge\" onClick={handleConnectApi}>\r\n                <img\r\n                    width=\"20px\"\r\n                    alt=\"Google sign-in\"\r\n                    src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Google_%22G%22_Logo.svg/512px-Google_%22G%22_Logo.svg.png\"\r\n                />\r\n                <span style={{ padding: '15px' }}>Connect API</span>\r\n            </Button>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default GoogleConnectApiForm;\r\n","import React from 'react';\r\nimport { Segment } from 'semantic-ui-react';\r\nconst Footer: React.FC = () => {\r\n    return (\r\n        <Segment inverted vertical as=\"footer\">\r\n            <a href=\"https://github.com/semantic-ui-forest\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                Github repository\r\n            </a>\r\n            .\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","import { Button, Container, Header, Menu } from 'semantic-ui-react';\r\nimport React from 'react';\r\n\r\ninterface Prop {\r\n    connected: boolean;\r\n    handleLogOut?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\r\n}\r\nconst HeaderComponent: React.FC<Prop> = (prop: Prop) => {\r\n    const { connected, handleLogOut } = prop;\r\n    return (\r\n        <Container as=\"nav\">\r\n            <Header inverted as=\"h1\">\r\n                Google Sheet App\r\n            </Header>\r\n            <Menu borderless compact inverted>\r\n                {connected && (\r\n                    <Button size=\"huge\" onClick={handleLogOut}>\r\n                        <span style={{ padding: '15px' }}>Logout</span>\r\n                    </Button>\r\n                )}\r\n            </Menu>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default HeaderComponent;\r\n","import React, { useState } from 'react';\r\nimport { Button, Container, Header, Form, Select } from 'semantic-ui-react';\r\n\r\ninterface Prop {\r\n    options: Array<{ text: string; value: string }>;\r\n    handleDeduplicateAction: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>, spSheetId: string) => void;\r\n}\r\nconst SelectSheetsForm: React.FC<Prop> = (prop) => {\r\n    const { options, handleDeduplicateAction } = prop;\r\n    const [selectedSpreadSheetId, setSelectedSpreadSheetId] = useState<string>('');\r\n\r\n    return (\r\n        <Container className=\"content\">\r\n            <Header inverted as=\"h2\">\r\n                Select spreadsheets to deduplicate their Data\r\n            </Header>\r\n            <div>\r\n                <Form size=\"massive\">\r\n                    <Form.Field\r\n                        control={Select}\r\n                        options={options}\r\n                        label={{\r\n                            htmlFor: 'form-select-control-spreadsheets',\r\n                        }}\r\n                        placeholder=\"Spreadsheets\"\r\n                        search\r\n                        searchInput={{ id: 'form-select-control-spreadsheets' }}\r\n                        onChange={(_e: any, { value }: any) => {\r\n                            setSelectedSpreadSheetId(value);\r\n                        }}\r\n                    />\r\n\r\n                    <Button\r\n                        type=\"submit\"\r\n                        size=\"huge\"\r\n                        disabled={selectedSpreadSheetId ? false : true}\r\n                        onClick={(e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n                            handleDeduplicateAction(e, selectedSpreadSheetId);\r\n                        }}\r\n                    >\r\n                        Deduplicate\r\n                    </Button>\r\n                </Form>\r\n            </div>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default SelectSheetsForm;\r\n","export const COOKIE_NAME = 'auth_token';\r\n","import axios from 'axios';\r\n\r\nexport const getGoogleConnectApiUrl = async () => {\r\n    const resp = await axios.get('/auth/google/url', {\r\n        withCredentials: true,\r\n    });\r\n    return resp.data;\r\n};\r\n\r\nexport const getSheetsList = async () => {\r\n    const resp = await axios.get('/sheets/list', {\r\n        withCredentials: true,\r\n    });\r\n    return await resp.data;\r\n};\r\n\r\nexport const updateDeduplicationSheets = async (id: string) => {\r\n    let resp;\r\n    try {\r\n        resp = await axios.get(`/sheets/deduplication_updater?id=${id}`, {\r\n            withCredentials: true,\r\n        });\r\n        return await resp.data;\r\n    } catch (error) {\r\n        resp = false;\r\n    }\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\ntype notif = {\r\n    display: boolean;\r\n    text: string;\r\n};\r\ninterface Prop {\r\n    notificationStatus: notif;\r\n}\r\nconst Notification: React.FC<Prop> = (props) => {\r\n    const { notificationStatus } = props;\r\n    useEffect(() => {\r\n        notificationStatus.display && toast(notificationStatus.text);\r\n    }, [notificationStatus]);\r\n    return (\r\n        <ToastContainer\r\n            position=\"top-right\"\r\n            autoClose={3000}\r\n            hideProgressBar\r\n            newestOnTop={false}\r\n            closeOnClick\r\n            rtl={false}\r\n            pauseOnFocusLoss\r\n            draggable\r\n            pauseOnHover\r\n            bodyStyle={{\r\n                color: 'black',\r\n                fontFamily: \"'Helvetica Neue', Helvetica, Arial, sans-serif\",\r\n                fontSize: '16px',\r\n                lineHeight: '1.6',\r\n            }}\r\n        ></ToastContainer>\r\n    );\r\n};\r\n\r\nexport default Notification;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Segment } from 'semantic-ui-react';\r\nimport '../assets/css/Home.css';\r\nimport GoogleConnectApiForm from '../components/GoogleConnectApiForm';\r\nimport Footer from '../components/layout/Footer';\r\nimport HeaderComponent from '../components/layout/HeaderComponent';\r\nimport SelectSpreadSheetsForm from '../components/SelectSpreadSheetsForm';\r\nimport { COOKIE_NAME } from '../constants';\r\nimport Cookies from 'universal-cookie';\r\nimport { getSheetsList, getGoogleConnectApiUrl, updateDeduplicationSheets } from '../actions';\r\nimport Notification from '../helpers/Notification';\r\nconst cookies = new Cookies();\r\nconst Home: React.FC = () => {\r\n    const [connected, setConnected] = useState<boolean>(cookies.get(COOKIE_NAME) ? true : false);\r\n    const [spreadSheetsList, setSpreadsheetsList] = useState<Array<{ text: string; value: string }>>([]);\r\n    const [notificationStatus, setNotificationStatus] = useState<{\r\n        display: boolean;\r\n        text: string;\r\n    }>({ display: false, text: '' });\r\n    /**\r\n     * This useEffect used to get Spreadsheets if user connected to the API\r\n     */\r\n    useEffect(() => {\r\n        const getSpreadsheetsList = async () => {\r\n            const apiResult = await getSheetsList();\r\n            return apiResult;\r\n        };\r\n        if (connected) {\r\n            getSpreadsheetsList().then((result) => {\r\n                const formatedList = result.data.files.map((item: any) => {\r\n                    return { text: item.name, value: item.id };\r\n                });\r\n                setSpreadsheetsList(formatedList);\r\n                setNotificationStatus({\r\n                    display: true,\r\n                    text: 'Access has been granted',\r\n                });\r\n            });\r\n        }\r\n    }, [connected]);\r\n\r\n    /**\r\n     * This method called from GoogleConnectApiForm Child to redirect to google auth and confirm permission (Connect API button click)\r\n     */\r\n    const handleConnectApi = async () => {\r\n        const urlLink = await getGoogleConnectApiUrl();\r\n        setNotificationStatus({\r\n            display: true,\r\n            text: 'You will be transferred safely to google authentication',\r\n        });\r\n        setTimeout(() => {\r\n            window.location.replace(urlLink);\r\n        }, 2000);\r\n    };\r\n    /**\r\n     * This method called from HeaderComponent Child to logout\r\n     */\r\n    const handleLogOut = () => {\r\n        cookies.remove(COOKIE_NAME);\r\n        setConnected(false);\r\n    };\r\n    /**\r\n     * This method called from SelectSpreadSheetsForm Child\r\n     * to deduplicate data of the selected spreadsheet id\r\n     */\r\n    const handleDeduplicateAction = async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>, spSheetId: string) => {\r\n        e.preventDefault();\r\n        const result = await updateDeduplicationSheets(spSheetId);\r\n        if (result?.status === 200) {\r\n            setNotificationStatus({\r\n                display: true,\r\n                text: 'The spreadsheet has been deduped',\r\n            });\r\n        } else if (!result) {\r\n            setNotificationStatus({\r\n                display: true,\r\n                text: 'Deduplication failed, check the existence of tab A,B,C ',\r\n            });\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            <Segment inverted vertical textAlign=\"center\">\r\n                {connected ? (\r\n                    <>\r\n                        <HeaderComponent connected={connected} handleLogOut={handleLogOut} />\r\n                        <SelectSpreadSheetsForm\r\n                            options={spreadSheetsList}\r\n                            handleDeduplicateAction={handleDeduplicateAction}\r\n                        />\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <HeaderComponent connected={connected} />\r\n                        <GoogleConnectApiForm handleConnectApi={handleConnectApi} />\r\n                    </>\r\n                )}\r\n                <Footer />\r\n                <Notification notificationStatus={notificationStatus} />\r\n            </Segment>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n","import ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\n\nimport Home from './pages/Home';\n\nReactDOM.render(<Home />, document.getElementById('root'));\n"],"sourceRoot":""}